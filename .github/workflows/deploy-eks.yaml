name: 'Terraform Lock Handler'
description: 'Handles Terraform state lock/unlock/wait'
runs:
  using: 'composite'
  steps:
    - name: Check and Handle Lock
      id: lock
      shell: bash
      run: |
        ACTION="${{ inputs.action }}"
        STATE_KEY="${{ inputs.state-key }}"
        REGION="${{ inputs.region }}"
        TABLE="${{ inputs.table }}"
        BUCKET="${{ inputs.bucket }}"

        echo "üîí Terraform lock handler - action: $ACTION"

        if [[ "$ACTION" == "unlock-only" || "$ACTION" == "force-unlock" ]]; then
          echo "üîì Forcing unlock of state: $STATE_KEY"
          aws dynamodb delete-item \
            --table-name "$TABLE" \
            --key "{\"LockID\": {\"S\": \"$STATE_KEY\"}}" \
            --region "$REGION" || true
          exit 0
        fi

        # Wait loop
        MAX_WAIT_MINUTES=10
        WAITED=0

        while aws dynamodb get-item \
          --table-name "$TABLE" \
          --key "{\"LockID\": {\"S\": \"$STATE_KEY\"}}" \
          --region "$REGION" | jq -e '.Item' > /dev/null; do

          echo "‚è≥ Lock still held. Waiting... (${WAITED}/${MAX_WAIT_MINUTES} mins)"
          sleep 30
          WAITED=$((WAITED+1))

          if [[ "$WAITED" -ge "$((MAX_WAIT_MINUTES * 2))" ]]; then
            echo "‚ùå Timeout waiting for lock."
            exit 1
          fi
        done

        echo "‚úÖ Lock released or not held"
        exit 0

inputs:
  action:
    description: 'deploy | destroy | unlock-only | force-unlock'
    required: true
  state-key:
    description: 'Terraform state file key'
    required: true
  region:
    description: 'AWS region'
    required: true
  table:
    description: 'DynamoDB lock table'
    required: true
  bucket:
    description: 'S3 bucket (unused for now)'
    required: false
  force-unlock:
    description: 'Force unlock stuck state before action'
    required: false
    default: false
