# .github/actions/terraform-deploy/action.yml
name: 'Terraform Deploy with Queue'
description: 'Deploys Terraform with automatic queuing and state management'
author: 'Your Organization'

inputs:
  working-directory:
    description: 'Directory containing Terraform files'
    required: true
  backend-config:
    description: 'Terraform backend configuration'
    required: true
  var-file:
    description: 'Path to terraform.tfvars file'
    required: false
    default: ''
  plan-only:
    description: 'Only run plan, not apply'
    required: false
    default: 'false'
  destroy:
    description: 'Run terraform destroy instead of apply'
    required: false
    default: 'false'
  terraform-version:
    description: 'Terraform version to use'
    required: false
    default: '1.9.0'
  auto-approve:
    description: 'Auto approve apply/destroy'
    required: false
    default: 'true'

outputs:
  plan-exitcode:
    description: 'Exit code from terraform plan'
    value: ${{ steps.plan.outputs.exitcode }}
  plan-stdout:
    description: 'Stdout from terraform plan'
    value: ${{ steps.plan.outputs.stdout }}
  plan-stderr:
    description: 'Stderr from terraform plan'
    value: ${{ steps.plan.outputs.stderr }}
  outputs-json:
    description: 'Terraform outputs in JSON format'
    value: ${{ steps.outputs.outputs-json }}

runs:
  using: 'composite'
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform-version }}
        terraform_wrapper: true

    - name: Create Backend Config File
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "${{ inputs.backend-config }}" > backend.conf
        
        # Also create backend.tf if it doesn't exist
        if [[ ! -f backend.tf ]]; then
          cat > backend.tf << 'EOF'
        terraform {
          backend "s3" {}
        }
        EOF
        fi

    - name: Check and Wait for Lock
      uses: ./.github/actions/terraform-lock-manager
      with:
        operation: acquire
        backend-config: ${{ inputs.backend-config }}
        wait-for-lock: 'true'
        wait-timeout-minutes: '15'
        max-lock-age-minutes: '30'

    - name: Terraform Init
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🚀 Initializing Terraform..."
        
        # Parse backend config for init
        BACKEND_ARGS=""
        while IFS='=' read -r key value; do
          [[ -z "$key" ]] && continue
          BACKEND_ARGS="$BACKEND_ARGS -backend-config=$key=$value"
        done < backend.conf
        
        terraform init \
          $BACKEND_ARGS \
          -upgrade \
          -no-color \
          -input=false

    - name: Terraform Validate
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "✅ Validating configuration..."
        terraform validate -no-color

    - name: Terraform Plan
      id: plan
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "📋 Creating execution plan..."
        
        VAR_FILE_ARG=""
        if [[ -n "${{ inputs.var-file }}" ]]; then
          VAR_FILE_ARG="-var-file=${{ inputs.var-file }}"
        fi
        
        if [[ "${{ inputs.destroy }}" == "true" ]]; then
          PLAN_ARGS="-destroy"
        else
          PLAN_ARGS=""
        fi
        
        # Run plan and capture output
        set +e
        terraform plan \
          -detailed-exitcode \
          -no-color \
          -input=false \
          -out=tfplan \
          $VAR_FILE_ARG \
          $PLAN_ARGS \
          2>&1 | tee plan_output.txt
        
        EXITCODE=$?
        set -e
        
        # Save outputs
        echo "exitcode=$EXITCODE" >> $GITHUB_OUTPUT
        
        # 0 = success, no changes
        # 1 = error
        # 2 = success, changes present
        
        if [[ $EXITCODE -eq 1 ]]; then
          echo "❌ Plan failed"
          exit 1
        elif [[ $EXITCODE -eq 2 ]]; then
          echo "📝 Plan shows changes to be applied"
        else
          echo "✅ Plan shows no changes needed"
        fi

    - name: Save Plan
      uses: actions/upload-artifact@v4
      if: steps.plan.outputs.exitcode == '2'
      with:
        name: tfplan-${{ github.sha }}
        path: ${{ inputs.working-directory }}/tfplan
        retention-days: 7

    - name: Generate Plan Summary
      if: always()
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        if [[ -f plan_output.txt ]]; then
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        ## 📋 Terraform Plan Summary
        
        <details>
        <summary>View Plan Output</summary>
        
        ```hcl
        $(cat plan_output.txt | tail -n 100)
        ```
        
        </details>
        EOF
        fi

    - name: Terraform Apply/Destroy
      id: apply
      if: |
        inputs.plan-only == 'false' && 
        (steps.plan.outputs.exitcode == '2' || inputs.destroy == 'true')
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        if [[ "${{ inputs.destroy }}" == "true" ]]; then
          echo "🗑️ Running terraform destroy..."
          
          if [[ "${{ inputs.auto-approve }}" == "true" ]]; then
            terraform destroy \
              -auto-approve \
              -no-color \
              -input=false \
              $([[ -n "${{ inputs.var-file }}" ]] && echo "-var-file=${{ inputs.var-file }}")
          else
            echo "❌ Manual approval required for destroy operations"
            exit 1
          fi
        else
          echo "🚀 Applying changes..."
          
          if [[ "${{ inputs.auto-approve }}" == "true" ]]; then
            terraform apply \
              -no-color \
              -input=false \
              tfplan
          else
            echo "❌ Manual approval required for apply operations"
            exit 1
          fi
        fi
        
        echo "✅ Operation completed successfully"

    - name: Get Outputs
      id: outputs
      if: success() && inputs.destroy == 'false'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "📊 Retrieving outputs..."
        
        # Get outputs in JSON format
        OUTPUTS_JSON=$(terraform output -json)
        
        # Save to output
        echo "outputs-json<<EOF" >> $GITHUB_OUTPUT
        echo "$OUTPUTS_JSON" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Also save to file for artifact
        echo "$OUTPUTS_JSON" > outputs.json

    - name: Save Outputs
      if: steps.outputs.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs-${{ github.sha }}
        path: ${{ inputs.working-directory }}/outputs.json
        retention-days: 30

    - name: Release Lock
      if: always()
      uses: ./.github/actions/terraform-lock-manager
      with:
        operation: release
        backend-config: ${{ inputs.backend-config }}