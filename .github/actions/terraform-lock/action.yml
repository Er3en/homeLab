# .github/actions/terraform-lock/action.yml
name: 'Terraform Lock Handler'
description: 'Handles Terraform state locks - check, wait, unlock'
author: 'Your Team'

inputs:
  command:
    description: 'Command: check-lock, wait-for-lock, force-unlock'
    required: true
  state-bucket:
    description: 'S3 bucket for state'
    required: true
  state-key:
    description: 'S3 key for state file'
    required: true
  lock-table:
    description: 'DynamoDB table for locks'
    required: true
  aws-region:
    description: 'AWS region'
    required: true
  max-wait-minutes:
    description: 'Max wait time for lock (minutes)'
    required: false
    default: '10'
  force-after-minutes:
    description: 'Force unlock if lock older than X minutes'
    required: false
    default: '30'

outputs:
  is-locked:
    description: 'Is state currently locked'
    value: ${{ steps.check.outputs.is-locked }}
  lock-id:
    description: 'Lock ID if locked'
    value: ${{ steps.check.outputs.lock-id }}
  lock-age:
    description: 'Lock age in minutes'
    value: ${{ steps.check.outputs.lock-age }}

runs:
  using: 'composite'
  steps:
    - name: Check Lock
      id: check
      shell: bash
      run: |
        LOCK_ID="${{ inputs.state-bucket }}/${{ inputs.state-key }}-md5"
        
        echo "🔍 Checking lock status..."
        LOCK_INFO=$(aws dynamodb get-item \
          --table-name "${{ inputs.lock-table }}" \
          --key "{\"LockID\": {\"S\": \"$LOCK_ID\"}}" \
          --region "${{ inputs.aws-region }}" \
          2>/dev/null || echo "{}")
        
        if echo "$LOCK_INFO" | jq -e '.Item' > /dev/null; then
          echo "is-locked=true" >> $GITHUB_OUTPUT
          
          # Parse lock info
          INFO=$(echo "$LOCK_INFO" | jq -r '.Item.Info.S')
          ID=$(echo "$INFO" | jq -r '.ID // "unknown"')
          WHO=$(echo "$INFO" | jq -r '.Who // "unknown"')
          CREATED=$(echo "$INFO" | jq -r '.Created // "unknown"')
          
          echo "lock-id=$ID" >> $GITHUB_OUTPUT
          
          # Calculate age
          if [[ "$CREATED" != "unknown" ]]; then
            CREATED_TS=$(date -d "$CREATED" +%s 2>/dev/null || echo 0)
            NOW_TS=$(date +%s)
            AGE_MINUTES=$(( (NOW_TS - CREATED_TS) / 60 ))
            echo "lock-age=$AGE_MINUTES" >> $GITHUB_OUTPUT
            
            echo "🔒 Locked by: $WHO"
            echo "⏰ Lock age: $AGE_MINUTES minutes"
          else
            echo "lock-age=unknown" >> $GITHUB_OUTPUT
          fi
        else
          echo "is-locked=false" >> $GITHUB_OUTPUT
          echo "lock-age=0" >> $GITHUB_OUTPUT
          echo "✅ State is not locked"
        fi

    - name: Wait for Lock
      if: inputs.command == 'wait-for-lock' && steps.check.outputs.is-locked == 'true'
      shell: bash
      run: |
        MAX_WAIT=$(( ${{ inputs.max-wait-minutes }} * 60 ))
        ELAPSED=0
        
        echo "⏳ Waiting up to ${{ inputs.max-wait-minutes }} minutes for lock release..."
        
        while [[ $ELAPSED -lt $MAX_WAIT ]]; do
          sleep 10
          ELAPSED=$((ELAPSED + 10))
          
          # Check if still locked
          LOCK_ID="${{ inputs.state-bucket }}/${{ inputs.state-key }}-md5"
          LOCK_CHECK=$(aws dynamodb get-item \
            --table-name "${{ inputs.lock-table }}" \
            --key "{\"LockID\": {\"S\": \"$LOCK_ID\"}}" \
            --region "${{ inputs.aws-region }}" \
            2>/dev/null || echo "{}")
          
          if ! echo "$LOCK_CHECK" | jq -e '.Item' > /dev/null; then
            echo "✅ Lock released!"
            exit 0
          fi
          
          echo "Still waiting... ($ELAPSED seconds)"
        done
        
        echo "❌ Timeout waiting for lock"
        exit 1

    - name: Force Unlock
      if: |
        inputs.command == 'force-unlock' || 
        (inputs.command == 'wait-for-lock' && 
         steps.check.outputs.is-locked == 'true' && 
         steps.check.outputs.lock-age != 'unknown' &&
         steps.check.outputs.lock-age >= inputs.force-after-minutes)
      shell: bash
      run: |
        if [[ "${{ steps.check.outputs.lock-age }}" -ge "${{ inputs.force-after-minutes }}" ]]; then
          echo "🔓 Lock is ${{ steps.check.outputs.lock-age }} minutes old, force unlocking..."
        else
          echo "🔓 Force unlocking state..."
        fi
        
        LOCK_ID="${{ inputs.state-bucket }}/${{ inputs.state-key }}-md5"
        aws dynamodb delete-item \
          --table-name "${{ inputs.lock-table }}" \
          --key "{\"LockID\": {\"S\": \"$LOCK_ID\"}}" \
          --region "${{ inputs.aws-region }}" || true
        
        echo "✅ Lock removed"